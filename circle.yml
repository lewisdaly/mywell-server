machine:
  pre:
    # - curl -sSL https://s3.amazonaws.com/circle-downloads/install-circleci-docker.sh | bash -s -- 1.10.0
    # - sudo pip install docker-compose
  services:
    - docker
  # environment:
    # PRODUCTION_S3_URL_FOR_LATEST_TAG: "s3://conversations-deployment/latest-bamboo-tags/production-$SERVICE_NAME_LOWER-circle"

dependencies:
  pre:
    - docker info
    - docker-compose -v
  override:
    - git submodule update --init
    - ls
    - pwd
    - cd ./mywell-server && npm install
    - docker-compose build
    - docker-compose up -d
    - sleep 30
    - docker-compose stop
    - docker-compose up -d #this is hacky. It seems that our mysql connector doesn't want to work first time around
  post:
    #make sure our containers are up
    - if [ `docker ps | wc -l` -lt 4 ]; then echo 'oh no, containers died'; exit 1; fi

test:
  override:
    - docker ps
    - >
      sudo lxc-attach -n "$(docker instpect --format "{{.Id}}" mywellserver_mywell-server_1)" \
        -- bash -c 'pwd; ls; ./test.sh'

    # - >
    #   sudo lxc-attach -n "$(docker inspect --format "{{.Id}}" testingcontainer)" \
    #     -- bash -c 'export NODE_ENV=build;export AVOID_NODEMON=true;export DATABASE_USER=bambootestuser;export DATABASE_PASS=password;export DATABASE_NAME=bambootestdb;export DATABASE_HOST=db;export MOCHA_FILE=/app/test/test-results.xml;\
    #     cd /app/test/ && ./run-tests.sh --reporter mocha-junit-reporter;'
    # - mkdir -p $CIRCLE_TEST_REPORTS/junit/
    # - cp ./app/test/test-results.xml $CIRCLE_TEST_REPORTS/junit/

# deployment:
#   master:
#     brach: master
#     commands:
#       -


  # staging:
  #   branch: staging
  #   commands:
  #     - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
  #     - docker push $IMAGE_NAME:$TAG_NAME
  #     - echo "$IMAGE_NAME:$TAG_NAME" > /tmp/last_image
  #     - echo $'[profile deployer]\nrole_arn = arn:aws:iam::997038222845:role/bamboo-Conversations-deployer\nsource_profile = default' >> ~/.aws/config
  #     - aws s3 cp /tmp/last_image $STAGING_S3_URL_FOR_LATEST_TAG --profile deployer
  #     - >
  #       cd ./conversations-deployment/tools;
  #       ./circle_deployer.py\
  #           --branch_name staging\
  #           --service_name $SERVICE_NAME\
  #           --docker_image_name $IMAGE_NAME:$TAG_NAME\
  #           --config_file_path ../vpc-configurations/vpc-definitions.yaml\
  #           --slack_api_token $SLACK_API_TOKEN
